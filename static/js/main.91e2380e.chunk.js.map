{"version":3,"sources":["components/ConvertionTypeSelect.js","components/SetupType.js","consts.js","components/SetupTable.js","components/WeatherSelect.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["ConvertionTypeSelect","value","onConvertionChange","Col","Form","Group","Check","label","onChange","SetupType","element","lowValue","highValue","readOnly","handleChange","Label","Control","event","target","weatherConditions","Greasy","Moist","Drizzle","Rain","Monsoon","Storm","elements","frontWing","adjustment","rearWing","frontSusp","rearSusp","frontArb","rearArb","frontRh","rearRh","frontTp","rearTp","gears","brakeBias","defaultValues","Object","entries","reduce","values","low","high","SetupTable","Table","striped","bordered","hover","size","keys","map","currentElement","WeatherSelect","onWeatherChange","as","Row","defaultValue","weatherType","Navbar","bg","variant","Brand","App","useState","weather","setWeather","convertionType","setConvertionType","inputValues","setInputValues","outputValues","setOutputValues","calculateAdjustedValue","_setupValue","adjustValue","weatherAdjustValue","adjustedValue","setupValue","parseInt","Math","round","Number","isNaN","Infinity","calculateOutputValues","currentValues","currentWeather","elementObject","className","Container","selectedWeather","newOuputValues","checked","type","newValue","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91e2380e.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport { Col, Form } from \"react-bootstrap\";\r\n\r\nimport React from \"react\";\r\n\r\nconst ConvertionTypeSelect = ({ value, onConvertionChange }) => {\r\n  const label = \"Dry to Wet\";\r\n\r\n  return (\r\n    <span>\r\n      <Col>\r\n        <Form.Group>\r\n          <Form.Check label={label} value={value} onChange={onConvertionChange} />\r\n        </Form.Group>\r\n      </Col>\r\n    </span>\r\n  );\r\n};\r\nexport default ConvertionTypeSelect;\r\n","/* eslint-disable react/prop-types */\r\nimport { Form } from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nconst SetupType = ({ element, label, lowValue, highValue, readOnly = false, handleChange }) => (\r\n  <tr>\r\n    <td>\r\n      <Form.Label>{label}</Form.Label>\r\n    </td>\r\n    <td>\r\n      <Form.Control\r\n        readOnly={readOnly}\r\n        value={lowValue}\r\n        onChange={(event) => handleChange(element, \"low\", event.target.value)}\r\n      />\r\n    </td>\r\n    <td>\r\n      <Form.Control\r\n        readOnly={readOnly}\r\n        value={highValue}\r\n        onChange={(event) => handleChange(element, \"high\", event.target.value)}\r\n      />\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nexport default SetupType;\r\n","export const weatherConditions = {\r\n  \"Bone Dry\": 0,\r\n  Greasy: 9,\r\n  Moist: 18,\r\n  Drizzle: 27,\r\n  \"Light Rain\": 36,\r\n  Rain: 45,\r\n  \"Wet and Slippery\": 54,\r\n  \"Steady Rain\": 63,\r\n  \"Heavy Rain\": 72,\r\n  \"Treacherous Rain and Spray\": 81,\r\n  Monsoon: 90,\r\n  Storm: 100,\r\n};\r\n\r\nexport const elements = {\r\n  frontWing: { label: \"Front Wing\", adjustment: 20 },\r\n  rearWing: { label: \"Rear Wing\", adjustment: 35 },\r\n  frontSusp: { label: \"Front Suspension\", adjustment: -20 },\r\n  rearSusp: { label: \"Rear Suspension\", adjustment: -35 },\r\n  frontArb: { label: \"Front Anti-Roll Bar\", adjustment: -18 },\r\n  rearArb: { label: \"Rear Anti-Roll Bar\", adjustment: -30 },\r\n  frontRh: { label: \"Front Ride Height\", adjustment: -12 },\r\n  rearRh: { label: \"Rear Ride Height\", adjustment: -13 },\r\n  frontTp: { label: \"Front Tire Pressure\", adjustment: 10 },\r\n  rearTp: { label: \"Rear Tire Pressure\", adjustment: 12 },\r\n  gears: { label: \"Gears\", adjustment: -5 },\r\n  brakeBias: { label: \"Brake Bias\", adjustment: 15 },\r\n};\r\n\r\nexport const defaultValues = Object.entries(elements).reduce(\r\n  (values, element) => ({ ...values, [element[0]]: { low: 0, high: 100 } }),\r\n  {}\r\n);\r\n","/* eslint-disable jsx-a11y/control-has-associated-label */\r\n/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport SetupType from \"./SetupType\";\r\nimport { elements } from \"../consts\";\r\n\r\nconst SetupTable = ({ readOnly = false, values, handleChange = () => {} }) => (\r\n  <Table striped bordered hover={false} size=\"sm\">\r\n    <thead>\r\n      <tr>\r\n        <th />\r\n        <th>Lowest</th>\r\n        <th>Highest</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {Object.keys(elements).map((element) => {\r\n        const currentElement = elements[element];\r\n        const lowValue = values[element].low;\r\n        const highValue = values[element].high;\r\n        return (\r\n          <SetupType\r\n            key={element}\r\n            element={element}\r\n            label={currentElement.label}\r\n            lowValue={lowValue}\r\n            highValue={highValue}\r\n            readOnly={readOnly}\r\n            handleChange={handleChange}\r\n          />\r\n        );\r\n      })}\r\n    </tbody>\r\n  </Table>\r\n);\r\n\r\nexport default SetupTable;\r\n","/* eslint-disable react/prop-types */\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { weatherConditions } from \"../consts\";\r\n\r\nconst WeatherSelect = ({ value, onWeatherChange }) => (\r\n  <Col>\r\n    <Form.Group as={Row}>\r\n      {/* <Form.Label>Weather: </Form.Label> */}\r\n\r\n      <Form.Control as=\"select\" defaultValue=\"Bone Dry\" value={value} onChange={onWeatherChange}>\r\n        {Object.keys(weatherConditions).map((weatherType) => (\r\n          <option key={weatherType}>{weatherType}</option>\r\n        ))}\r\n      </Form.Control>\r\n    </Form.Group>\r\n  </Col>\r\n);\r\n\r\nexport default WeatherSelect;\r\n","import React from \"react\";\r\nimport { Navbar as ReactNavbar } from \"react-bootstrap\";\r\n\r\nconst Navbar = () => (\r\n  <ReactNavbar bg=\"dark\" variant=\"dark\">\r\n    <ReactNavbar.Brand>Batracer setup helper</ReactNavbar.Brand>\r\n  </ReactNavbar>\r\n);\r\n\r\nexport default Navbar;\r\n","import \"./App.css\";\n\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { ConvertionTypeSelect, SetupTable, WeatherSelect, Navbar } from \"./components\";\nimport { defaultValues, elements, weatherConditions } from \"./consts\";\n\nconst App = () => {\n  const [weather, setWeather] = useState(\"Bone Dry\");\n  const [convertionType, setConvertionType] = useState(true);\n  const [inputValues, setInputValues] = useState(defaultValues);\n  const [outputValues, setOutputValues] = useState(defaultValues);\n\n  const calculateAdjustedValue = (_setupValue, adjustValue, weatherAdjustValue) => {\n    let adjustedValue = (adjustValue / 100) * weatherAdjustValue;\n\n    const setupValue = parseInt(_setupValue, 10);\n\n    if (convertionType) {\n      adjustedValue = Math.round(setupValue + adjustedValue);\n    } else {\n      adjustedValue = Math.round(setupValue - adjustedValue);\n    }\n\n    if (adjustedValue > 100) {\n      adjustedValue = 100;\n    } else if (adjustedValue < 0 || Number.isNaN(adjustedValue) || adjustedValue === Infinity) {\n      adjustedValue = 0;\n    }\n    return adjustedValue;\n  };\n\n  const calculateOutputValues = () =>\n    Object.keys(inputValues).reduce((values, element) => {\n      const currentValues = inputValues[element];\n      const adjustValue = elements[element].adjustment;\n      const currentWeather = weatherConditions[weather];\n      const low = calculateAdjustedValue(currentValues.low, adjustValue, currentWeather);\n      const high = calculateAdjustedValue(currentValues.high, adjustValue, currentWeather);\n      const elementObject = { [element]: { low, high } };\n\n      return { ...values, ...elementObject };\n    }, {});\n\n  const handleWeatherChange = (event) => {\n    const selectedWeather = event.target.value || \"Bone Dry\";\n    setWeather(selectedWeather);\n\n    const newOuputValues = calculateOutputValues();\n    setOutputValues(newOuputValues);\n  };\n\n  const handleConvertionTypeChange = (event) => {\n    setConvertionType(!event.target.checked);\n\n    const newOuputValues = calculateOutputValues();\n    setOutputValues(newOuputValues);\n  };\n\n  const handleInputValueChange = (element, type, value) => {\n    let newValue = Number(value);\n\n    if (value === \"\" || Number.isNaN(value) || value < 0) {\n      newValue = 0;\n    } else if (value > 100) {\n      newValue = 100;\n    }\n\n    setInputValues((prevState) => ({\n      ...prevState,\n      [element]: { ...prevState[element], [type]: newValue },\n    }));\n\n    const adjustValue = elements[element].adjustment;\n    const adjustedValue = calculateAdjustedValue(newValue, adjustValue, weatherConditions[weather]);\n\n    setOutputValues((prevState) => ({\n      ...prevState,\n      [element]: { ...prevState[element], [type]: adjustedValue },\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container>\n        <WeatherSelect value={weather} onWeatherChange={handleWeatherChange} />\n        <ConvertionTypeSelect\n          value={convertionType}\n          onConvertionChange={handleConvertionTypeChange}\n        />\n        <Row>\n          <Col>\n            <SetupTable values={inputValues} handleChange={handleInputValueChange} />\n          </Col>\n          <Col>\n            <SetupTable values={outputValues} readOnly />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/order */\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}